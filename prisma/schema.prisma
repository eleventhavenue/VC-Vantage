// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  TEST_USER
  ADMIN
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  verificationToken String?  @unique
  image           String?
  password        String?
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  role              UserRole  @default(USER)  // Add role directly to User
  accounts        Account[]
  sessions        Session[]
  reports         Report[]
  profile         Profile?  // Add this line
  onboardingCompleted Boolean @default(false) // Add this line
  createdAt       DateTime  @default(now())
  previousPasswords  String?       // Stores last 3 password hashes
  lastPasswordChange DateTime?     // Tracks when password was last changed
  passwordAttempts   Int          @default(0)
  lockoutUntil      DateTime?     // For temporary account lockouts
  lastLogin        DateTime?
   // New fields for trial system
  isSubscribed      Boolean   @default(false)
  trialUsageCount   Int       @default(0)
  subscriptionTier  String?   // For future use with different tiers
  subscriptionEnds  DateTime?
    // New fields for monthly usage
  monthlyUsageCount Int       @default(0)
  lastUsageReset    DateTime  @default(now())
  feedbacks     Feedback[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            String
  firmName        String
  firmSize        String
  investmentFocus String[]
  dealStages      String[]
  investmentSize  String?
  completedAt     DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id                String   @id @default(cuid())
  query             String
  type              String
  overview          String
  marketAnalysis    String
  financialAnalysis String
  strategicAnalysis String
  summary           String
  keyQuestions      String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  feedbacks         Feedback[]
}

model Feedback {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
  feedback  String
  createdAt DateTime @default(now())
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  subscribedAt DateTime @default(now())
}