// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  accounts        Account[]
  sessions        Session[]
  reports         Report[]
  createdAt       DateTime  @default(now())
    previousPasswords  String?       // Stores last 3 password hashes
  lastPasswordChange DateTime?     // Tracks when password was last changed
  passwordAttempts   Int          @default(0)
  lockoutUntil      DateTime?     // For temporary account lockouts
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id                String   @id @default(cuid())
  query             String
  type              String
  overview          String
  marketAnalysis    String
  financialAnalysis String
  strategicAnalysis String
  summary           String
  keyQuestions      String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String
}
